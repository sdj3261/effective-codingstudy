{"ast":null,"code":"import axios from \"axios\";\n\n// 인증이 필요한 API에서 사용할 axios 객체\nconst authAxios = axios.create({\n  baseUrl: `${process.env.REACT_APP_API}`,\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n  }\n});\n\n// interceptor를 사용해서 요청마다 header에 accessToken을 넣어줍니다.\nauthAxios.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem(\"accessToken\");\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => console.log(\"request interceptor error\", error));\n\n// 예외 처리 및 재 로그인 유도 로직\nauthAxios.interceptors.response.use(response => response, error => {\n  // 로그아웃 시켜야 할 에러코드\n  if (error.response.data.errorCode === \"B001\") {\n    alert(error.response.data.msg);\n    localStorage.clear();\n    window.location.replace('/');\n  }\n  return Promise.reject(error.response.data);\n});\nexport default authAxios;","map":{"version":3,"names":["axios","authAxios","create","baseUrl","process","env","REACT_APP_API","headers","Authorization","localStorage","getItem","interceptors","request","use","config","accessToken","error","console","log","response","data","errorCode","alert","msg","clear","window","location","replace","Promise","reject"],"sources":["C:/effective-codingstudy/effective-codingstudy/front-coding-study/src/interceptors.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// 인증이 필요한 API에서 사용할 axios 객체\r\nconst authAxios = axios.create({\r\n    baseUrl: `${process.env.REACT_APP_API}`,\r\n    headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\r\n    }\r\n})\r\n\r\n// interceptor를 사용해서 요청마다 header에 accessToken을 넣어줍니다.\r\nauthAxios.interceptors.request.use(\r\n    (config) => {\r\n        const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n        if(accessToken){\r\n            config.headers.Authorization = `Bearer ${accessToken}`;\r\n        }\r\n\r\n        return config;\r\n    },\r\n    (error) => console.log(\"request interceptor error\", error)\r\n)\r\n\r\n// 예외 처리 및 재 로그인 유도 로직\r\nauthAxios.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n        // 로그아웃 시켜야 할 에러코드\r\n        if(error.response.data.errorCode === \"B001\"){\r\n            alert(error.response.data.msg);\r\n            localStorage.clear();\r\n            window.location.replace('/');\r\n        }\r\n\r\n        return Promise.reject(error.response.data);\r\n    }\r\n)\r\n\r\nexport default authAxios;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAG,GAAEC,OAAO,CAACC,GAAG,CAACC,aAAc,EAAC;EACvCC,OAAO,EAAE;IACLC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;EACjE;AACJ,CAAC,CAAC;;AAEF;AACAT,SAAS,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAK;EACR,MAAMC,WAAW,GAAGN,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAEvD,IAAGK,WAAW,EAAC;IACXD,MAAM,CAACP,OAAO,CAACC,aAAa,GAAI,UAASO,WAAY,EAAC;EAC1D;EAEA,OAAOD,MAAM;AACjB,CAAC,EACAE,KAAK,IAAKC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,KAAK,CAC7D,CAAC;;AAED;AACAf,SAAS,CAACU,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC9BM,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACP;EACA,IAAGA,KAAK,CAACG,QAAQ,CAACC,IAAI,CAACC,SAAS,KAAK,MAAM,EAAC;IACxCC,KAAK,CAACN,KAAK,CAACG,QAAQ,CAACC,IAAI,CAACG,GAAG,CAAC;IAC9Bd,YAAY,CAACe,KAAK,CAAC,CAAC;IACpBC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC,GAAG,CAAC;EAChC;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACb,KAAK,CAACG,QAAQ,CAACC,IAAI,CAAC;AAC9C,CACJ,CAAC;AAED,eAAenB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}